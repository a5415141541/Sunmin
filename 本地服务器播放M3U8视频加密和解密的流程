1:本地服务器就是从网上下载HTTPServer文件包(本地服务器是指用第三方代码开启本地服务器)
@property (nonatomic,  copy) HTTPServer *httpServer;
@synthesize httpServer;

#pragma mark ---- 创建服务器
- (HTTPServer*)openHttpServer
{
    if (!httpServer) {
        httpServer = [[HTTPServer alloc] init];
        [httpServer setType:@"_http._tcp."];
        [httpServer setPort:12345];  // 12345  可以进行随便更换  
    }
    return httpServer;
}
#pramer  开启本地服务器
- (void)start
{
//设置本地服务器为这个地址 [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask,YES) objectAtIndex:0]
    [self.httpServer setDocumentRoot:[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask,YES) objectAtIndex:0]];
    NSError *error;                      
    if(![self.httpServer start:&error]){
        NSLog(@"%@",error);
    }
}
//后台返回的数据----  进行创建本地文件
#pragma mark - Create m3u8File
-(NSString*)createLocalM3U8file:(NSString *)strData
{
    NSString *cachepath=[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES)lastObject];
    NSString *downloadDic = cachepath;
    NSString *saveTo = [downloadDic stringByAppendingPathComponent:@"segmen"];
    NSString *fullpath = [saveTo stringByAppendingPathComponent:@"segmen.m3u8"];
    
    NSError *errorFile;
    BOOL createSucFile = [[NSFileManager defaultManager] createDirectoryAtPath:downloadDic withIntermediateDirectories:YES attributes:nil error:&errorFile];
    if (!createSucFile) {
        return nil;
    }
    NSError *errorM3u8;
    BOOL createSucM3u8 = [[NSFileManager defaultManager] createDirectoryAtPath:saveTo withIntermediateDirectories:YES attributes:nil error:&errorM3u8];
    if (!createSucM3u8) {
        return nil;
    }
    id strTitle = [strData stringByReplacingOccurrencesOfString:_urlWith withString:@"\"http://localhost:12345/segments.key\"\n"];
    NSString *head  = [NSString stringWithFormat:@"%@",strTitle];
    NSMutableData *writer = [[NSMutableData alloc] init];
    [writer appendData:[head dataUsingEncoding:NSUTF8StringEncoding]];
    
    NSError *error;
    BOOL bSucc =[writer writeToFile:fullpath options:(NSDataWritingAtomic)  error:&error];
    if(bSucc)
    {
        NSLog(@"create m3u8file succeed; fullpath:%@, content:%@",fullpath,head);
        return  fullpath;
    }
    else
    {
        NSLog(@"create m3u8file failed:%@", error);
        return  nil;
    }
    return nil;
}

//获取key   这个有的公司加密了，有的没有加密 
key的地址(这个就是密钥)  16字节，自己生成这个文件就ok   （文件名字.key）

//M3U8文件也有了，key也有了  进行播放
@"http://localhost:12345/segmen/segmen.m3u8"      播放地址
//http://localhost:1234 刚才你设置的      后面是对应地址文件夹segmen   里面有这个segmen.M3U8文件  进行播放这个地址


2:问题

   1:为什么要开启本地服务器进行播放视频

   2:M3U8视频到底是什么格式的URL

   3:M3U8如何进行解析播放

   4:M3U8如何进行加密和解密

在线播放     

把后台给你返回的那么字符串放到文本里面生成.m3u8文件(格式应该懂吧@网上一大推)    （文件名字.m3u8）



上面就是一个M3U8文件和M3U8的key文件

有了这俩个文件,害怕播放不了么?

刚开始说的，开启本地服务器,本地服务器是有地址的

http://localhost:12345/segmen/segmen.m3u8   这个就是本地服务器的地址/后面是segmen文件，在后面就是M3U8的文件

使用本地服务器播放M3U8就是把M3U8文件移动到本地服务器或者是把当前生成在本地的M3U8文件地址设置成本地服务器地址就OK了

然后播放上面的地址就可以进行播放视频了,直播推流一个道理

加密和解密    推荐几种 AES加密 AES解密（128的）

 这个需要咱们app端和后台进行商量来，如何进行M3U8这么多字符串的加密和解密的,Key是放到哪里的,怎么样取到key生成文件，取到M3U8生成.m3u8文件，这样就一目了然

说白了,就是字符串的截取在截取.生成文件,放到本地服务器进行播放。
